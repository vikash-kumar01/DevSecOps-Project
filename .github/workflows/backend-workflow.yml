name: Build and Package Backend app
on:
  push:
    branches:
      - main
    paths:
      - "spring-boot-data-jpa-mysql-master/**"
      - ".github/workflows/backend-workflow.yml"
      - "!README.md"
      - "!spring-boot-data-jpa-mysql-master/README.md"
      - "actions/maven-build-action/action.yml"
      
jobs:
  sast:
    name: Snyk SAST
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk to check for vulnerabilities
        run: |
          cd spring-boot-data-jpa-mysql-master
          mvn install -DskipTests
          snyk auth ${{ secrets.SNYK_TOKEN }}
          mkdir -p reports
          snyk code test --json-file-output=reports/snyk_sast_report.json || true
      - name: Upload Snyk Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: snyk_sast_report
          path: spring-boot-data-jpa-mysql-master/reports
  sca:
    name: Snyk SCA
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk to check for vulnerabilities
        run: |
          cd spring-boot-data-jpa-mysql-master
          mkdir -p reports
          chmod +x mvnw
          mvn install -DskipTests
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test --severity-threshold=high --json > reports/snyk_sca_report.json --file=pom.xml || true
          snyk monitor
      - name: Upload Snyk Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: snyk_sca_report
          path: spring-boot-data-jpa-mysql-master/reports
  maven-build:
    needs: [sast,sca]
    if: "contains(github.event.head_commit.message,'run workflow')"
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.2.0
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - uses: actions/checkout@v3
      - name: Build maven app
        uses: ./actions/maven-build-action
        with:
          directory: spring-boot-data-jpa-mysql-master
      - name: Archive JAR file
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: spring-boot-data-jpa-mysql-master/target/*.jar

  docker-build:
    runs-on: ubuntu-latest
    needs: maven-build
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download JAR file
        uses: actions/download-artifact@v3
        with:
          name: app
          path: spring-boot-data-jpa-mysql-master/target
      - name: Extract image version
        uses: ./actions/image-version-action
      - name: Build Docker image
        run: cd spring-boot-data-jpa-mysql-master && docker build -t elmazidi/myapp-backend:${{ env.version }} .
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk to check for vulnerabilities
        run: |
          cd spring-boot-data-jpa-mysql-master
          mkdir -p reports
          npm install
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk container test elmazidi/myapp-backend:${{ env.version }} --json-file-output=reports/container_report.json
          snyk container monitor elmazidi/myapp-backend:${{ env.version }}
      - name: Upload Snyk Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: container_report
          path: spring-boot-data-jpa-mysql-master/reports
      - name: Log in to Docker Hub
        run: docker login -u elmazidi -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push backend Docker image
        run: docker push elmazidi/myapp-backend:${{ env.version }}
      - name: Share image version with the next Job
        id: extract-version
        run: echo "version=${{ env.version }}" >> "$GITHUB_OUTPUT"
  # dast:
  #   name: OWASP ZAP DAST
  #   runs-on: ubuntu-latest
  #   services:
  #     mysql:
  #       image: mysql:8.2.0
  #       env:
  #         MYSQL_ROOT_PASSWORD: password
  #       ports:
  #         - 3306:3306
  #       options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
  #     backend:
  #      image: elmazidi/myapp-backend:latest
  #      ports:
  #        - 8080:8080
  #      env:
  #        MYSQL_PASSWORD: password
  #        MYSQL_USERNAME: root
  #        DB_HOST: http://localhost:3306
  #        DB_NAME: testdb
  #   steps:
  #    - name: Test Service Availability
  #      run: |
  #       # Wait for the service to be ready
  #       while ! curl -s http://localhost:8080/ >/dev/null; do
  #         echo "Waiting for the service to be available..."
  #         sleep 5
  #       done
  #       echo "Service is now available."
  #    - name: ZAP Scan
  #      uses: zaproxy/action-baseline@v0.6.1
  #      with:
  #       docker_name: 'owasp/zap2docker-stable'
  #       target: 'http://localhost:8080/'
  #       rules_file_name: '.zap/rules.tsv'
  #       cmd_options: '-J report_json -a'
  #    - name: Save ZAP Report
  #      run: mkdir -p reports && mv report_json.json reports/dast_report.json
    
  #    - name: Upload ZAP Report as Artifact
  #      uses: actions/upload-artifact@v2
  #      with:
  #       name: zap_dast_report
  #       path: reports
  gitops-k8s-deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Configure Git
        run: |
          git config --global user.email "ilyasselmazidi123@gmail.com"
          git config --global user.name "ELMILYASS"
      - name: Clone the Git repository containing the K8s cluster's configuration files.
        run: git clone https://github.com/ELMILYASS/K8sClusterDevopsProject.git
      - name: Update deployment version
        run: cd K8sClusterDevopsProject/dev && sed -i "s/myapp-backend:.*/myapp-backend:${{needs.docker-build.outputs.version}}/g" backend-app.yaml

      - name: Display updated deployment file
        run: cd K8sClusterDevopsProject/dev && cat backend-app.yaml

      - name: Commit changes
        run: |
          cd K8sClusterDevopsProject
          git add .
          git commit -m "backend version ${{needs.docker-build.outputs.version}}"

      - name: Set Git remote URL
        run: cd K8sClusterDevopsProject && git remote set-url origin https://ELMILYASS:${{ secrets.GITHUBTOKEN }}@github.com/ELMILYASS/K8sClusterDevopsProject.git

      - name: Push changes to Github
        run: cd K8sClusterDevopsProject && git push -uf origin main
